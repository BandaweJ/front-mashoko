import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Store } from '@ngrx/store';
import { StudentsModel } from 'src/app/registration/models/students.model';
import { ExemptionType } from '../enums/exemption-type.enum';
import { ExemptionModel } from '../models/exemption.model';
import { exemptionActions } from '../store/finance.actions';

@Component({
  selector: 'app-create-exemption',
  templateUrl: './create-exemption.component.html',
  styleUrls: ['./create-exemption.component.css'],
})
export class CreateExemptionComponent implements OnInit {
  exemptionForm!: FormGroup;
  exemptionTypes = Object.values(ExemptionType); // For dropdown options
  selectedStudent: StudentsModel | null = null;

  constructor(private fb: FormBuilder, private store: Store) {}

  ngOnInit(): void {
    this.initForm();

    // Subscribe to changes in the exemption type to conditionally validate amounts
    this.exemptionForm
      .get('type')
      ?.valueChanges.subscribe((type: ExemptionType) => {
        this.toggleAmountValidators(type);
      });
  }

  private initForm(): void {
    this.exemptionForm = this.fb.group({
      studentId: [null, Validators.required], // Store studentId here
      studentName: [{ value: '', disabled: true }], // For display only
      type: [ExemptionType.FIXED_AMOUNT, Validators.required],
      fixedAmount: [null],
      percentageAmount: [null],
      description: [''],
      isActive: [true], // Default to active
    });

    // Initialize validators based on default type
    this.toggleAmountValidators(this.exemptionForm.get('type')?.value);
  }

  // Helper to manage conditional validation for amount fields
  private toggleAmountValidators(type: ExemptionType): void {
    const fixedAmountControl = this.exemptionForm.get('fixedAmount');
    const percentageAmountControl = this.exemptionForm.get('percentageAmount');

    if (
      type === ExemptionType.FIXED_AMOUNT //||
      // type === ExemptionType.STAFF_SIBLING
    ) {
      fixedAmountControl?.enable();
      fixedAmountControl?.setValidators([
        Validators.required,
        Validators.min(0.01),
      ]);
      percentageAmountControl?.clearValidators();
    } else if (type === ExemptionType.PERCENTAGE) {
      percentageAmountControl?.setValidators([
        Validators.required,
        Validators.min(0.01),
        Validators.max(100),
      ]);
      fixedAmountControl?.clearValidators();
    } else if (type === ExemptionType.STAFF_SIBLING) {
      fixedAmountControl?.clearValidators();
      fixedAmountControl?.disable();
      percentageAmountControl?.clearValidators();
    } else {
      fixedAmountControl?.clearValidators();
      percentageAmountControl?.clearValidators();
    }
    fixedAmountControl?.updateValueAndValidity();
    percentageAmountControl?.updateValueAndValidity();
  }

  studentSelected(student: StudentsModel): void {
    this.selectedStudent = student;
    this.exemptionForm.patchValue({
      studentId: student.studentNumber, // Store the student's ID
      studentName: `${student.surname} ${student.name} (${student.studentNumber})`,
    });
  }

  onSubmit(): void {
    if (this.exemptionForm.valid && this.selectedStudent) {
      // Create the ExemptionModel object to dispatch
      const newExemption: ExemptionModel = {
        id: 0, // ID will be generated by the backend
        student: this.selectedStudent, // Assign the full student model
        type: this.exemptionForm.value.type,
        fixedAmount: this.exemptionForm.value.fixedAmount,
        percentageAmount: this.exemptionForm.value.percentageAmount,
        description: this.exemptionForm.value.description,
        isActive: this.exemptionForm.value.isActive,
        createdAt: new Date(), // These will be overwritten by backend but good practice
        updatedAt: new Date(),
      };

      this.store.dispatch(
        exemptionActions.createExemption({ exemption: newExemption })
      );

      // Optionally, reset the form after successful submission
      this.exemptionForm.reset({
        type: ExemptionType.FIXED_AMOUNT, // Reset to default type
        isActive: true,
      });
      this.selectedStudent = null;
      this.exemptionForm.get('studentName')?.setValue(''); // Clear display field
    } else {
      this.exemptionForm.markAllAsTouched(); // Show validation errors
      console.error('Form is invalid or student not selected.');
    }
  }
}
